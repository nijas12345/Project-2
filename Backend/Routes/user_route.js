"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const userController_1 = __importDefault(require("../Controllers/userController"));
const userServices_1 = __importDefault(require("../Services/userServices"));
const userRepository_1 = __importDefault(require("../Repositories/userRepository"));
const userModal_1 = __importDefault(require("../Model/userModal"));
const projectModal_1 = __importDefault(require("../Model/projectModal"));
const clockModal_1 = __importDefault(require("../Model/clockModal"));
const chatModal_1 = __importDefault(require("../Model/chatModal"));
const meetingModal_1 = __importDefault(require("../Model/meetingModal"));
const taskModal_1 = __importDefault(require("../Model/taskModal"));
const multer_config_1 = __importDefault(require("../Config/multer_config"));
const jwt_config_1 = require("../Config/jwt_config");
const projectRepository_1 = __importDefault(require("../Repositories/projectRepository"));
const projectServices_1 = __importDefault(require("../Services/projectServices"));
const projectController_1 = __importDefault(require("../Controllers/projectController"));
const workLogController_1 = __importDefault(require("../Controllers/workLogController"));
const workLogService_1 = __importDefault(require("../Services/workLogService"));
const workLogRepository_1 = __importDefault(require("../Repositories/workLogRepository"));
const taskController_1 = __importDefault(require("../Controllers/taskController"));
const taskServices_1 = __importDefault(require("../Services/taskServices"));
const taskRepository_1 = __importDefault(require("../Repositories/taskRepository"));
const chatController_1 = __importDefault(require("../Controllers/chatController"));
const chatServices_1 = __importDefault(require("../Services/chatServices"));
const chatRepository_1 = __importDefault(require("../Repositories/chatRepository"));
const notificationRepository_1 = __importDefault(require("../Repositories/notificationRepository"));
const notificationModal_1 = __importDefault(require("../Model/notificationModal"));
const notificationServices_1 = __importDefault(require("../Services/notificationServices"));
const notificationController_1 = __importDefault(require("../Controllers/notificationController"));
const companyModal_1 = __importDefault(require("../Model/companyModal"));
const adminModal_1 = __importDefault(require("../Model/adminModal"));
const userAuth_1 = __importDefault(require("../Middlewares/userAuth"));
const paymentModal_1 = __importDefault(require("../Model/paymentModal"));
const companyController_1 = __importDefault(require("../Controllers/companyController"));
const companyRepository_1 = __importDefault(require("../Repositories/companyRepository"));
const companyServices_1 = __importDefault(require("../Services/companyServices"));
const meetingRepository_1 = __importDefault(require("../Repositories/meetingRepository"));
const meetingServices_1 = __importDefault(require("../Services/meetingServices"));
const meetingController_1 = __importDefault(require("../Controllers/meetingController"));
const adminRepository_1 = __importDefault(require("../Repositories/adminRepository"));
const paymentRepository_1 = __importDefault(require("../Repositories/paymentRepository"));
const adminRepository = new adminRepository_1.default(adminModal_1.default);
const userRepository = new userRepository_1.default(userModal_1.default);
const companyRepository = new companyRepository_1.default(companyModal_1.default);
const projectRepository = new projectRepository_1.default(projectModal_1.default);
const paymentRepository = new paymentRepository_1.default(paymentModal_1.default);
const taskRepository = new taskRepository_1.default(taskModal_1.default);
const chatRepository = new chatRepository_1.default(chatModal_1.default);
const notificationRepository = new notificationRepository_1.default(notificationModal_1.default);
const meetingRepository = new meetingRepository_1.default(meetingModal_1.default);
const workLogRepository = new workLogRepository_1.default(clockModal_1.default);
const userService = new userServices_1.default(userRepository, companyRepository);
const userController = new userController_1.default(userService);
const companyService = new companyServices_1.default(companyRepository, adminRepository, userRepository, projectRepository, paymentRepository);
const companyController = new companyController_1.default(companyService);
const projectService = new projectServices_1.default(projectRepository, adminRepository, userRepository, paymentRepository, companyRepository, taskRepository, chatRepository);
const projectController = new projectController_1.default(projectService);
const taskService = new taskServices_1.default(taskRepository, userRepository);
const taskController = new taskController_1.default(taskService);
const chatService = new chatServices_1.default(chatRepository);
const chatController = new chatController_1.default(chatService);
const notificationService = new notificationServices_1.default(notificationRepository, adminRepository, userRepository, taskRepository);
const notificationController = new notificationController_1.default(notificationService);
const meetingService = new meetingServices_1.default(meetingRepository, adminRepository, userRepository, projectRepository);
const meetingController = new meetingController_1.default(meetingService);
const workLogService = new workLogService_1.default(workLogRepository);
const workLogController = new workLogController_1.default(workLogService);
const user_router = (0, express_1.Router)();
user_router.post("/register", userController.register);
user_router.post("/otp", userController.otpVerification);
user_router.get("/resend-otp", userController.resendOTP);
user_router.post("/login", userController.login);
user_router.get("/logout", userController.logout);
user_router.post("/google/auth", userController.verifyGoogleAuth);
user_router.put("/reset-password", userController.resetPassword);
user_router.put("/validate-reset-token", userController.validateToken);
user_router.put("/change-password", userController.confirmResetPassword);
user_router.post("/upload-profile-image", jwt_config_1.verifyToken, multer_config_1.default.single("profileImage"), userController.profilePicture);
user_router.post("/update-user", jwt_config_1.verifyToken, userController.updateUser);
user_router.post("/refferalCode", jwt_config_1.verifyToken, userAuth_1.default, userController.addRefferalCode);
user_router.get("/get-projects", jwt_config_1.verifyToken, userAuth_1.default, projectController.getProjects);
user_router.get("/project-members", jwt_config_1.verifyToken, userAuth_1.default, projectController.projectMembers);
user_router.get("/get-projects/chat", jwt_config_1.verifyToken, userAuth_1.default, projectController.chatProjects);
user_router.post("/clock-in", jwt_config_1.verifyToken, userAuth_1.default, workLogController.clockIn);
user_router.post("/clock-out", jwt_config_1.verifyToken, userAuth_1.default, workLogController.clockOut);
user_router.get("/clock-status", jwt_config_1.verifyToken, userAuth_1.default, workLogController.clockStatus);
user_router.get("/break-in", jwt_config_1.verifyToken, userAuth_1.default, workLogController.breakStart);
user_router.get("/break-out", jwt_config_1.verifyToken, userAuth_1.default, workLogController.breakEnd);
user_router.post("/schedule-clockStatus", userAuth_1.default, workLogController.scheduleClockStatus);
user_router.get("/clock-statistics", jwt_config_1.verifyToken, userAuth_1.default, workLogController.clockStatistics);
user_router.post("/create-task", jwt_config_1.verifyToken, userAuth_1.default, multer_config_1.default.single("file"), taskController.taskDetails);
user_router.patch("/edit-task", jwt_config_1.verifyToken, userAuth_1.default, multer_config_1.default.single("file"), taskController.editTask);
user_router.post("/task-details", jwt_config_1.verifyToken, userAuth_1.default, taskController.showTask);
user_router.patch("/update-task-status", jwt_config_1.verifyToken, userAuth_1.default, taskController.updateTaskStatus);
user_router.put("/tasks", jwt_config_1.verifyToken, userAuth_1.default, taskController.userTasks);
user_router.get("/count-tasks", jwt_config_1.verifyToken, userAuth_1.default, taskController.countTask);
user_router.post("/add-comment", jwt_config_1.verifyToken, taskController.addComment);
user_router.put("/acceptance-status", jwt_config_1.verifyToken, taskController.assignedStatus);
user_router.patch("/delete-comment", jwt_config_1.verifyToken, taskController.deleteUserComment);
user_router.get("/messages/:projectId", jwt_config_1.verifyToken, userAuth_1.default, chatController.getChats);
user_router.get("/get-notifications", jwt_config_1.verifyToken, userAuth_1.default, notificationController.getNotifications);
user_router.get("/get-notifications-count", jwt_config_1.verifyToken, userAuth_1.default, notificationController.getNotificationsCount);
user_router.get("/get-projects/meetings", jwt_config_1.verifyToken, userAuth_1.default, meetingController.getMeetings);
user_router.patch("/fetchMeetings", jwt_config_1.verifyToken, userAuth_1.default, meetingController.fetchMeetings);
user_router.get("/company-info", jwt_config_1.verifyToken, userAuth_1.default, companyController.companyName);
exports.default = user_router;
