"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const adminRepository_1 = __importDefault(require("../Repositories/adminRepository"));
const adminServices_1 = __importDefault(require("../Services/adminServices"));
const adminController_1 = __importDefault(require("../Controllers/adminController"));
const adminModal_1 = __importDefault(require("../Model/adminModal"));
const jwt_config_1 = require("../Config/jwt_config");
const companyRepository_1 = __importDefault(require("../Repositories/companyRepository"));
const companyServices_1 = __importDefault(require("../Services/companyServices"));
const companyController_1 = __importDefault(require("../Controllers/companyController"));
const companyModal_1 = __importDefault(require("../Model/companyModal"));
const projectController_1 = __importDefault(require("../Controllers/projectController"));
const projectRepository_1 = __importDefault(require("../Repositories/projectRepository"));
const projectServices_1 = __importDefault(require("../Services/projectServices"));
const userModal_1 = __importDefault(require("../Model/userModal"));
const projectModal_1 = __importDefault(require("../Model/projectModal"));
const chatModal_1 = __importDefault(require("../Model/chatModal"));
const taskModal_1 = __importDefault(require("../Model/taskModal"));
const taskRepository_1 = __importDefault(require("../Repositories/taskRepository"));
const taskServices_1 = __importDefault(require("../Services/taskServices"));
const taskController_1 = __importDefault(require("../Controllers/taskController"));
const multer_config_1 = __importDefault(require("../Config/multer_config"));
const chatRepository_1 = __importDefault(require("../Repositories/chatRepository"));
const chatServices_1 = __importDefault(require("../Services/chatServices"));
const chatController_1 = __importDefault(require("../Controllers/chatController"));
const meetingModal_1 = __importDefault(require("../Model/meetingModal"));
const paymentModal_1 = __importDefault(require("../Model/paymentModal"));
const notificationRepository_1 = __importDefault(require("../Repositories/notificationRepository"));
const notificationServices_1 = __importDefault(require("../Services/notificationServices"));
const notificationController_1 = __importDefault(require("../Controllers/notificationController"));
const notificationModal_1 = __importDefault(require("../Model/notificationModal"));
const meetingRepository_1 = __importDefault(require("../Repositories/meetingRepository"));
const meetingServices_1 = __importDefault(require("../Services/meetingServices"));
const meetingController_1 = __importDefault(require("../Controllers/meetingController"));
const paymentServices_1 = __importDefault(require("../Services/paymentServices"));
const paymentRepository_1 = __importDefault(require("../Repositories/paymentRepository"));
const paymentController_1 = __importDefault(require("../Controllers/paymentController"));
const userRepository_1 = __importDefault(require("../Repositories/userRepository"));
const adminRepository = new adminRepository_1.default(adminModal_1.default);
const userRepository = new userRepository_1.default(userModal_1.default);
const companyRepository = new companyRepository_1.default(companyModal_1.default);
const projectRepository = new projectRepository_1.default(projectModal_1.default);
const paymentRepository = new paymentRepository_1.default(paymentModal_1.default);
const taskRepository = new taskRepository_1.default(taskModal_1.default);
const chatRepository = new chatRepository_1.default(chatModal_1.default);
const notificationRepository = new notificationRepository_1.default(notificationModal_1.default);
const meetingRepository = new meetingRepository_1.default(meetingModal_1.default);
const adminService = new adminServices_1.default(adminRepository, userRepository);
const adminController = new adminController_1.default(adminService);
const companyService = new companyServices_1.default(companyRepository, adminRepository, userRepository, projectRepository, paymentRepository);
const companyController = new companyController_1.default(companyService);
const projectService = new projectServices_1.default(projectRepository, adminRepository, userRepository, paymentRepository, companyRepository, taskRepository, chatRepository);
const projectController = new projectController_1.default(projectService);
const paymentService = new paymentServices_1.default(paymentRepository);
const paymentController = new paymentController_1.default(paymentService);
const taskService = new taskServices_1.default(taskRepository, userRepository);
const taskController = new taskController_1.default(taskService);
const chatService = new chatServices_1.default(chatRepository);
const chatController = new chatController_1.default(chatService);
const notificationService = new notificationServices_1.default(notificationRepository, adminRepository, userRepository, taskRepository);
const notificationController = new notificationController_1.default(notificationService);
const meetingService = new meetingServices_1.default(meetingRepository, adminRepository, userRepository, projectRepository);
const meetingController = new meetingController_1.default(meetingService);
const admin_router = (0, express_1.Router)();
admin_router.post("/register", adminController.register);
admin_router.post("/otp", adminController.otpVerification);
admin_router.get("/resend-otp", adminController.resendOTP);
admin_router.post("/login", adminController.login);
admin_router.post("/google/auth", adminController.verifyGoogleAuth);
admin_router.put("/reset-password", adminController.resetPassword);
admin_router.put("/validate-reset-token", adminController.validateToken);
admin_router.put("/change-password", adminController.confirmResetPassword);
admin_router.get("/logout", adminController.logout);
admin_router.post("/upload-profile-image", jwt_config_1.adminVerifyToken, multer_config_1.default.single("profileImage"), adminController.adminProfilePicture);
admin_router.post("/payment", jwt_config_1.adminVerifyToken, paymentController.payment);
admin_router.get("/get-notifications", jwt_config_1.adminVerifyToken, notificationController.getAdminNotifications);
admin_router.get("/get-notifications-count", jwt_config_1.adminVerifyToken, notificationController.adminNotificationsCount);
admin_router.post("/update-user", jwt_config_1.adminVerifyToken, adminController.updateAdmin);
admin_router.post("/companyDetails", jwt_config_1.adminVerifyToken, companyController.companyDetails);
admin_router.post("/create-project", jwt_config_1.adminVerifyToken, projectController.createProject);
admin_router.get("/get-projects", jwt_config_1.adminVerifyToken, projectController.getAdminProjects);
admin_router.put("/update-project", jwt_config_1.adminVerifyToken, projectController.updateProject);
admin_router.get("/project-members", jwt_config_1.adminVerifyToken, projectController.projectMembers);
admin_router.put("/delete-project", jwt_config_1.adminVerifyToken, projectController.deleteProject);
admin_router.post("/create-task", jwt_config_1.adminVerifyToken, multer_config_1.default.single("file"), taskController.taskDetails);
admin_router.put("/tasks", jwt_config_1.adminVerifyToken, taskController.adminTasks);
admin_router.patch("/edit-task", jwt_config_1.adminVerifyToken, multer_config_1.default.single("file"), taskController.editTask);
admin_router.patch("/delete-task", jwt_config_1.adminVerifyToken, taskController.deleteTask);
admin_router.get("/count-tasks", jwt_config_1.adminVerifyToken, taskController.adminCountTasks);
admin_router.post("/add-comment", jwt_config_1.adminVerifyToken, taskController.addAdminComment);
admin_router.patch("/delete-comment", jwt_config_1.adminVerifyToken, taskController.deleteComment);
admin_router.get("/company-members", jwt_config_1.adminVerifyToken, companyController.companyMembers);
admin_router.put("/search-users", jwt_config_1.adminVerifyToken, companyController.searchMembers);
admin_router.put("/user-block", jwt_config_1.adminVerifyToken, adminController.blockUser);
admin_router.put("/user-unBlock", jwt_config_1.adminVerifyToken, adminController.unBlockUser);
admin_router.get("/company-data", jwt_config_1.adminVerifyToken, companyController.companyData);
admin_router.put("/invitation", jwt_config_1.adminVerifyToken, companyController.invitationUsers);
admin_router.patch("/inviteUser", jwt_config_1.adminVerifyToken, companyController.inviteUser);
admin_router.patch("/get-selected-projects", jwt_config_1.adminVerifyToken, projectController.getSelectedProject);
admin_router.get("/company-info", jwt_config_1.adminVerifyToken, companyController.companyInfo);
admin_router.get("/get-projects/chats", jwt_config_1.adminVerifyToken, projectController.AdminchatProjects);
admin_router.get("/messages/:projectId", jwt_config_1.adminVerifyToken, chatController.getAdminChats);
admin_router.get("/get-projects/meetings", jwt_config_1.adminVerifyToken, meetingController.getAdminMeetings);
admin_router.get("/project-members", jwt_config_1.adminVerifyToken, projectController.projectMembers);
admin_router.post("/schedule-meeting", jwt_config_1.adminVerifyToken, meetingController.scheduleMeeting);
admin_router.put("/fetchMeetings", jwt_config_1.adminVerifyToken, meetingController.AdminfetchMeetings);
admin_router.patch("/updateStatus", jwt_config_1.adminVerifyToken, meetingController.updateMeetingStatus);
admin_router.get("/search", jwt_config_1.adminVerifyToken, taskController.getSearchResults);
exports.default = admin_router;
